//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace hospital.Caja
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CajaBDEntities : DbContext
    {
        public CajaBDEntities()
            : base("name=CajaBDEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CLIENTE> CLIENTE { get; set; }
        public virtual DbSet<EMPLEADO> EMPLEADO { get; set; }
        public virtual DbSet<SEGURO> SEGURO { get; set; }
        public virtual DbSet<SERVICIOS> SERVICIOS { get; set; }
        public virtual DbSet<REPORTE> REPORTE { get; set; }
        public virtual DbSet<MontoInicial> MontoInicial { get; set; }
        public virtual DbSet<FACTURA> FACTURA { get; set; }
        public virtual DbSet<PROCESOS> PROCESOS { get; set; }
    
        public virtual int ppInsertarFactura(Nullable<int> idCliente, Nullable<int> idServicio, Nullable<decimal> monto, Nullable<decimal> desSeguro, Nullable<decimal> pagado, Nullable<System.DateTime> fecha, Nullable<int> idEmpleado, Nullable<decimal> importe, Nullable<int> estado, Nullable<int> cod_Factura)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idServicioParameter = idServicio.HasValue ?
                new ObjectParameter("IdServicio", idServicio) :
                new ObjectParameter("IdServicio", typeof(int));
    
            var montoParameter = monto.HasValue ?
                new ObjectParameter("Monto", monto) :
                new ObjectParameter("Monto", typeof(decimal));
    
            var desSeguroParameter = desSeguro.HasValue ?
                new ObjectParameter("DesSeguro", desSeguro) :
                new ObjectParameter("DesSeguro", typeof(decimal));
    
            var pagadoParameter = pagado.HasValue ?
                new ObjectParameter("Pagado", pagado) :
                new ObjectParameter("Pagado", typeof(decimal));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("IdEmpleado", idEmpleado) :
                new ObjectParameter("IdEmpleado", typeof(int));
    
            var importeParameter = importe.HasValue ?
                new ObjectParameter("Importe", importe) :
                new ObjectParameter("Importe", typeof(decimal));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(int));
    
            var cod_FacturaParameter = cod_Factura.HasValue ?
                new ObjectParameter("Cod_Factura", cod_Factura) :
                new ObjectParameter("Cod_Factura", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ppInsertarFactura", idClienteParameter, idServicioParameter, montoParameter, desSeguroParameter, pagadoParameter, fechaParameter, idEmpleadoParameter, importeParameter, estadoParameter, cod_FacturaParameter);
        }
    
        public virtual ObjectResult<string> ppLogin(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ppLogin", usernameParameter, passwordParameter);
        }
    
        public virtual int ppInsertarCliente(string nombre_Cliente, string cedula_Cliente, Nullable<int> id_Seguro, string poliza, string telefono)
        {
            var nombre_ClienteParameter = nombre_Cliente != null ?
                new ObjectParameter("Nombre_Cliente", nombre_Cliente) :
                new ObjectParameter("Nombre_Cliente", typeof(string));
    
            var cedula_ClienteParameter = cedula_Cliente != null ?
                new ObjectParameter("Cedula_Cliente", cedula_Cliente) :
                new ObjectParameter("Cedula_Cliente", typeof(string));
    
            var id_SeguroParameter = id_Seguro.HasValue ?
                new ObjectParameter("Id_Seguro", id_Seguro) :
                new ObjectParameter("Id_Seguro", typeof(int));
    
            var polizaParameter = poliza != null ?
                new ObjectParameter("Poliza", poliza) :
                new ObjectParameter("Poliza", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ppInsertarCliente", nombre_ClienteParameter, cedula_ClienteParameter, id_SeguroParameter, polizaParameter, telefonoParameter);
        }
    
        public virtual int ppInsertarReporte(Nullable<int> id_Cliente, Nullable<int> cod_Factura, Nullable<int> id_Empleado, Nullable<decimal> total_Facturado, Nullable<decimal> total_Seguro, Nullable<decimal> tota_Importe, Nullable<decimal> total_Balance, Nullable<System.DateTime> fecha)
        {
            var id_ClienteParameter = id_Cliente.HasValue ?
                new ObjectParameter("Id_Cliente", id_Cliente) :
                new ObjectParameter("Id_Cliente", typeof(int));
    
            var cod_FacturaParameter = cod_Factura.HasValue ?
                new ObjectParameter("Cod_Factura", cod_Factura) :
                new ObjectParameter("Cod_Factura", typeof(int));
    
            var id_EmpleadoParameter = id_Empleado.HasValue ?
                new ObjectParameter("Id_Empleado", id_Empleado) :
                new ObjectParameter("Id_Empleado", typeof(int));
    
            var total_FacturadoParameter = total_Facturado.HasValue ?
                new ObjectParameter("Total_Facturado", total_Facturado) :
                new ObjectParameter("Total_Facturado", typeof(decimal));
    
            var total_SeguroParameter = total_Seguro.HasValue ?
                new ObjectParameter("Total_Seguro", total_Seguro) :
                new ObjectParameter("Total_Seguro", typeof(decimal));
    
            var tota_ImporteParameter = tota_Importe.HasValue ?
                new ObjectParameter("Tota_Importe", tota_Importe) :
                new ObjectParameter("Tota_Importe", typeof(decimal));
    
            var total_BalanceParameter = total_Balance.HasValue ?
                new ObjectParameter("Total_Balance", total_Balance) :
                new ObjectParameter("Total_Balance", typeof(decimal));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ppInsertarReporte", id_ClienteParameter, cod_FacturaParameter, id_EmpleadoParameter, total_FacturadoParameter, total_SeguroParameter, tota_ImporteParameter, total_BalanceParameter, fechaParameter);
        }
    
        public virtual ObjectResult<ppReporte_Result> ppReporte(Nullable<int> param1, Nullable<int> param2)
        {
            var param1Parameter = param1.HasValue ?
                new ObjectParameter("param1", param1) :
                new ObjectParameter("param1", typeof(int));
    
            var param2Parameter = param2.HasValue ?
                new ObjectParameter("param2", param2) :
                new ObjectParameter("param2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ppReporte_Result>("ppReporte", param1Parameter, param2Parameter);
        }
    
        public virtual int ppInsertarMontoInicial(Nullable<decimal> monto, Nullable<System.DateTime> fecha)
        {
            var montoParameter = monto.HasValue ?
                new ObjectParameter("Monto", monto) :
                new ObjectParameter("Monto", typeof(decimal));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ppInsertarMontoInicial", montoParameter, fechaParameter);
        }
    
        public virtual int ppInsertarProceso(Nullable<int> id_Cliente, string descripcion)
        {
            var id_ClienteParameter = id_Cliente.HasValue ?
                new ObjectParameter("Id_Cliente", id_Cliente) :
                new ObjectParameter("Id_Cliente", typeof(int));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ppInsertarProceso", id_ClienteParameter, descripcionParameter);
        }
    }
}
