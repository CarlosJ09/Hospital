//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PruebaIntegracion
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CajaBDEntities : DbContext
    {
        public CajaBDEntities()
            : base("name=CajaBDEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CLIENTE> CLIENTEs { get; set; }
        public virtual DbSet<EMPLEADO> EMPLEADOes { get; set; }
        public virtual DbSet<FACTURA> FACTURAs { get; set; }
        public virtual DbSet<REPORTE> REPORTEs { get; set; }
        public virtual DbSet<SEGURO> SEGUROes { get; set; }
        public virtual DbSet<SERVICIO> SERVICIOS { get; set; }
    
        public virtual int ppIngresarFactura(Nullable<int> id_Cliente, Nullable<int> id_Servicio, string codigo_Factura, Nullable<decimal> monto, Nullable<decimal> des_Seguro, Nullable<decimal> pagado, Nullable<decimal> total_Facturado, Nullable<decimal> total_Seguro, Nullable<decimal> total_Balance, Nullable<System.DateTime> fecha, Nullable<int> id_Empleado, Nullable<decimal> importe)
        {
            var id_ClienteParameter = id_Cliente.HasValue ?
                new ObjectParameter("Id_Cliente", id_Cliente) :
                new ObjectParameter("Id_Cliente", typeof(int));
    
            var id_ServicioParameter = id_Servicio.HasValue ?
                new ObjectParameter("Id_Servicio", id_Servicio) :
                new ObjectParameter("Id_Servicio", typeof(int));
    
            var codigo_FacturaParameter = codigo_Factura != null ?
                new ObjectParameter("Codigo_Factura", codigo_Factura) :
                new ObjectParameter("Codigo_Factura", typeof(string));
    
            var montoParameter = monto.HasValue ?
                new ObjectParameter("Monto", monto) :
                new ObjectParameter("Monto", typeof(decimal));
    
            var des_SeguroParameter = des_Seguro.HasValue ?
                new ObjectParameter("Des_Seguro", des_Seguro) :
                new ObjectParameter("Des_Seguro", typeof(decimal));
    
            var pagadoParameter = pagado.HasValue ?
                new ObjectParameter("Pagado", pagado) :
                new ObjectParameter("Pagado", typeof(decimal));
    
            var total_FacturadoParameter = total_Facturado.HasValue ?
                new ObjectParameter("Total_Facturado", total_Facturado) :
                new ObjectParameter("Total_Facturado", typeof(decimal));
    
            var total_SeguroParameter = total_Seguro.HasValue ?
                new ObjectParameter("Total_Seguro", total_Seguro) :
                new ObjectParameter("Total_Seguro", typeof(decimal));
    
            var total_BalanceParameter = total_Balance.HasValue ?
                new ObjectParameter("Total_Balance", total_Balance) :
                new ObjectParameter("Total_Balance", typeof(decimal));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var id_EmpleadoParameter = id_Empleado.HasValue ?
                new ObjectParameter("Id_Empleado", id_Empleado) :
                new ObjectParameter("Id_Empleado", typeof(int));
    
            var importeParameter = importe.HasValue ?
                new ObjectParameter("Importe", importe) :
                new ObjectParameter("Importe", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ppIngresarFactura", id_ClienteParameter, id_ServicioParameter, codigo_FacturaParameter, montoParameter, des_SeguroParameter, pagadoParameter, total_FacturadoParameter, total_SeguroParameter, total_BalanceParameter, fechaParameter, id_EmpleadoParameter, importeParameter);
        }
    
        public virtual int ppInsertarCliente(string nombre_Cliente, string cedula_Cliente, Nullable<int> id_Seguro, string poliza, string telefono)
        {
            var nombre_ClienteParameter = nombre_Cliente != null ?
                new ObjectParameter("Nombre_Cliente", nombre_Cliente) :
                new ObjectParameter("Nombre_Cliente", typeof(string));
    
            var cedula_ClienteParameter = cedula_Cliente != null ?
                new ObjectParameter("Cedula_Cliente", cedula_Cliente) :
                new ObjectParameter("Cedula_Cliente", typeof(string));
    
            var id_SeguroParameter = id_Seguro.HasValue ?
                new ObjectParameter("Id_Seguro", id_Seguro) :
                new ObjectParameter("Id_Seguro", typeof(int));
    
            var polizaParameter = poliza != null ?
                new ObjectParameter("Poliza", poliza) :
                new ObjectParameter("Poliza", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ppInsertarCliente", nombre_ClienteParameter, cedula_ClienteParameter, id_SeguroParameter, polizaParameter, telefonoParameter);
        }
    }
}
